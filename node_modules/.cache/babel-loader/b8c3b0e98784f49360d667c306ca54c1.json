{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ctfhk\\\\Desktop\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee(); // State variables to manage loading status for employees and transactions\n\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const [transactionApprovals, setTransactionApprovals] = useState({});\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    // Update the server\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Update local state\n\n    setTransactionApprovals(prevState => ({ ...prevState,\n      [transactionId]: newValue\n    }));\n  }, [fetchWithoutCache]);\n  const loadAllTransactions = useCallback(async () => {\n    // Set loading status for transactions\n    setIsLoadingTransactions(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll(); // Set loading status for employees to false immediately after fetching\n\n    setIsLoadingEmployees(false);\n    await paginatedTransactionsUtils.fetchAll(); // Set loading status for transactions to false after fetching\n\n    setIsLoadingTransactions(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (transactionsByEmployee === null || transactionsByEmployee.length === 0) {\n      paginatedTransactionsUtils.invalidateData();\n    }\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployee, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      // Set loading status for employees before fetching\n      setIsLoadingEmployees(true);\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // Use isLoadingEmployees to control the loading state of InputSelect\n        isLoading: isLoadingEmployees,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          const hasValidId = newValue.id !== \"\";\n          const loadTransactions = hasValidId ? loadTransactionsByEmployee : loadAllTransactions; // Load transactions based on the presence of a valid ID\n\n          await loadTransactions(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null ? true : false,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: paginatedTransactionsUtils.loading ? \"Loading...\" : \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2aZKQXu7p2KCJKOYJHcdguLQnwc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoadingEmployees","setIsLoadingEmployees","isLoadingTransactions","setIsLoadingTransactions","transactionApprovals","setTransactionApprovals","transactions","setTransactionApproval","transactionId","newValue","fetchWithoutCache","value","prevState","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","length","fetchById","loading","item","id","label","firstName","lastName","hasValidId","loadTransactions","nextPage"],"sources":["C:/Users/ctfhk/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  // State variables to manage loading status for employees and transactions\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const [transactionApprovals, setTransactionApprovals] = useState<{ [key: string]: boolean }>({});\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  \nconst setTransactionApproval = useCallback(\n  async ({ transactionId, newValue }) => {\n    // Update the server\n    await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue,\n    });\n    // Update local state\n    setTransactionApprovals(prevState => ({ ...prevState, [transactionId]: newValue }));\n  },\n  [fetchWithoutCache]\n);\n\n  const loadAllTransactions = useCallback(async () => {\n    // Set loading status for transactions\n    setIsLoadingTransactions(true);\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll();\n    // Set loading status for employees to false immediately after fetching\n    setIsLoadingEmployees(false); \n    await paginatedTransactionsUtils.fetchAll();\n    // Set loading status for transactions to false after fetching\n    setIsLoadingTransactions(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  \n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (transactionsByEmployee === null || transactionsByEmployee.length === 0) {\n        paginatedTransactionsUtils.invalidateData();\n      }\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployee, transactionsByEmployeeUtils]\n  );\n  \n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      // Set loading status for employees before fetching\n      setIsLoadingEmployees(true);\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  \n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          // Use isLoadingEmployees to control the loading state of InputSelect\n          isLoading={isLoadingEmployees}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n            const hasValidId = newValue.id !== \"\";\n            const loadTransactions = hasValidId ? loadTransactionsByEmployee : loadAllTransactions;\n            // Load transactions based on the presence of a valid ID\n            await loadTransactions(newValue.id);\n          }}\n          \n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          {transactions !== null && paginatedTransactions?.nextPage !== null &&(\n            <button\n              className=\"RampButton\"\n              disabled={\n                paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null\n                  ? true\n                  : false\n              }\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              {/*control the loading state of the button */}\n              {paginatedTransactionsUtils.loading? \"Loading...\" : \"View More\"}\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}