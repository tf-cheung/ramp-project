{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ctfhk\\\\Desktop\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee(); // State variables to manage loading status for employees and transactions\n\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    // Set loading status for transactions\n    setIsLoadingTransactions(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll(); // Set loading status for employees to false immediately after fetching\n\n    setIsLoadingEmployees(false);\n    await paginatedTransactionsUtils.fetchAll(); // Set loading status for transactions to false after fetching\n\n    setIsLoadingTransactions(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (transactionsByEmployee === null || transactionsByEmployee.length === 0) {\n      paginatedTransactionsUtils.invalidateData();\n    }\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployee, transactionsByEmployeeUtils, transactions]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading && selectedEmployeeId === null) {\n      // 如果没有选择员工，并且员工数据还在加载，那么加载所有交易\n      setIsLoadingEmployees(true);\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions, selectedEmployeeId]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // Use isLoadingEmployees to control the loading state of InputSelect\n        isLoading: isLoadingEmployees,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            setSelectedEmployeeId(null);\n            return;\n          }\n\n          const hasValidId = newValue.id !== \"\";\n          setSelectedEmployeeId(hasValidId ? newValue.id : null);\n          const loadTransactions = hasValidId ? loadTransactionsByEmployee : loadAllTransactions; // Load transactions based on the presence of a valid ID\n\n          await loadTransactions(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null ? true : false,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: paginatedTransactionsUtils.loading ? \"Loading...\" : \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/BIHJuiReiRGFRFTXjo4MvLKMKk=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoadingEmployees","setIsLoadingEmployees","isLoadingTransactions","setIsLoadingTransactions","selectedEmployeeId","setSelectedEmployeeId","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","length","fetchById","loading","item","value","id","label","firstName","lastName","newValue","hasValidId","loadTransactions","nextPage"],"sources":["C:/Users/ctfhk/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  // State variables to manage loading status for employees and transactions\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null);\n\n  \n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    // Set loading status for transactions\n    setIsLoadingTransactions(true);\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll();\n    // Set loading status for employees to false immediately after fetching\n    setIsLoadingEmployees(false); \n    await paginatedTransactionsUtils.fetchAll();\n    // Set loading status for transactions to false after fetching\n    setIsLoadingTransactions(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  \n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (transactionsByEmployee === null || transactionsByEmployee.length === 0) {\n        paginatedTransactionsUtils.invalidateData();\n      }\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployee, transactionsByEmployeeUtils,transactions]\n  );\n  \n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading && selectedEmployeeId === null) {\n      // 如果没有选择员工，并且员工数据还在加载，那么加载所有交易\n      setIsLoadingEmployees(true);\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions, selectedEmployeeId]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          // Use isLoadingEmployees to control the loading state of InputSelect\n          isLoading={isLoadingEmployees}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              setSelectedEmployeeId(null);\n              return;\n            }\n            const hasValidId = newValue.id !== \"\";\n            setSelectedEmployeeId(hasValidId ? newValue.id : null);\n            const loadTransactions = hasValidId ? loadTransactionsByEmployee : loadAllTransactions;\n            // Load transactions based on the presence of a valid ID\n            await loadTransactions(newValue.id);\n          }}\n          \n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          {transactions !== null && paginatedTransactions?.nextPage !== null &&(\n            <button\n              className=\"RampButton\"\n              disabled={\n                paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null\n                  ? true\n                  : false\n              }\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              {/*control the loading state of the button */}\n              {paginatedTransactionsUtils.loading? \"Loading...\" : \"View More\"}\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}